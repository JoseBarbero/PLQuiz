options{  JDK_VERSION = "1.7";  static = false;  USER_CHAR_STREAM = true;  //JAVA_UNICODE_ESCAPE = true ;  UNICODE_INPUT = true;}PARSER_BEGIN(ExpresionRegularParser)package es.ubu.inf.tfg.asu.parser;import java.util.Stack;import es.ubu.inf.tfg.asu.datos.ExpresionRegular;public class ExpresionRegularParser{  private Stack < ExpresionRegular > stack;  private int posicion;}PARSER_END(ExpresionRegularParser)SKIP :{  " "| "\r"| "\t"}TOKEN :{  < KLEEN : "*" >| < CONCAT : "." | "\u2027">| < UNION : "|" >| < OPEN_PAREN : "(" >| < CLOSE_PAREN : ")" >}TOKEN :{  < SYMBOL : ["a"-"z"] | "$" >| < EPSILON : "E" |  "\u03B5">| < END : "\n" >}ExpresionRegular expresion() :{}{  {    stack = new Stack < ExpresionRegular > ();    posicion = 1;  }  termino() < END >  {    // Aumentamos la expresión regular
    stack.push(ExpresionRegular.nodoAumentado(posicion));    stack.push(ExpresionRegular.nodoConcat(stack.pop(), stack.pop()));    return stack.pop();  }}void termino() :{}{  factor()  (    < CONCAT > factor() // Concatenación explicita
    {      stack.push(ExpresionRegular.nodoConcat(stack.pop(), stack.pop()));    }  | factor() // Concatenación implicita
    {      stack.push(ExpresionRegular.nodoConcat(stack.pop(), stack.pop()));    }  | < UNION > factor()    {      stack.push(ExpresionRegular.nodoUnion(stack.pop(), stack.pop()));    }  )*}void factor() :{  Token token;}{  (    token = < SYMBOL >    {      stack.push(ExpresionRegular.nodoSimbolo(posicion++, token.image.charAt(0)));    }  | < OPEN_PAREN > termino() < CLOSE_PAREN >  )  unario()| token = < EPSILON >  {    stack.push(ExpresionRegular.nodoVacio());  }}void unario() :{}{  (    < KLEEN >    {      stack.push(ExpresionRegular.nodoCierre(stack.pop()));    }  )?}