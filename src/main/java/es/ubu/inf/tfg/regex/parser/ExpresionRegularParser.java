/* Generated By:JavaCC: Do not edit this line. ExpresionRegularParser.java */
package es.ubu.inf.tfg.regex.parser;
import java.util.Stack;

import es.ubu.inf.tfg.regex.datos.ExpresionRegular;

public class ExpresionRegularParser implements ExpresionRegularParserConstants {
  private Stack < ExpresionRegular > stack;

  private int posicion;

        /*	 * <expresion> :- <operacion> <eof>	 * <operacion> :- <termino> ('|' <termino>)*	 * <termino> :- <unario> ('.' <unario>)*	 * <unario> :- <factor> '*'?	 * <factor> :- <simbolo> | <epsilon> | '(' <operacion> ')'	 */
  final public ExpresionRegular expresion() throws ParseException {
    stack = new Stack < ExpresionRegular > ();
    posicion = 1;
    operacion();
    jj_consume_token(END);
    // Aumentamos la expresión regular
    stack.push(ExpresionRegular.nodoAumentado(posicion));
    stack.push(ExpresionRegular.nodoConcat(stack.pop(), stack.pop()));
    {if (true) return stack.pop();}
    throw new Error("Missing return statement in function");
  }

  final public void operacion() throws ParseException {
    termino();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case UNION:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      jj_consume_token(UNION);
      termino();
      stack.push(ExpresionRegular.nodoUnion(stack.pop(), stack.pop()));
    }
  }

  final public void termino() throws ParseException {
    unario();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONCAT:
      case OPEN_PAREN:
      case SYMBOL:
      case EPSILON:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONCAT:
        jj_consume_token(CONCAT);
        unario();
      stack.push(ExpresionRegular.nodoConcat(stack.pop(), stack.pop()));
        break;
      case OPEN_PAREN:
      case SYMBOL:
      case EPSILON:
        unario();
      stack.push(ExpresionRegular.nodoConcat(stack.pop(), stack.pop()));
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void unario() throws ParseException {
    factor();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case KLEEN:
      jj_consume_token(KLEEN);
      stack.push(ExpresionRegular.nodoCierre(stack.pop()));
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
  }

  final public void factor() throws ParseException {
  Token token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SYMBOL:
      token = jj_consume_token(SYMBOL);
      stack.push(ExpresionRegular.nodoSimbolo(posicion++, token.image.charAt(0)));
      break;
    case EPSILON:
      jj_consume_token(EPSILON);
    stack.push(ExpresionRegular.nodoVacio());
      break;
    case OPEN_PAREN:
      jj_consume_token(OPEN_PAREN);
      operacion();
      jj_consume_token(CLOSE_PAREN);
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  /** Generated Token Manager. */
  public ExpresionRegularParserTokenManager token_source;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[5];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x40,0x6a0,0x6a0,0x10,0x680,};
   }

  /** Constructor with user supplied CharStream. */
  public ExpresionRegularParser(CharStream stream) {
    token_source = new ExpresionRegularParserTokenManager(stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(CharStream stream) {
    token_source.ReInit(stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public ExpresionRegularParser(ExpresionRegularParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ExpresionRegularParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[12];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 5; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 12; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
