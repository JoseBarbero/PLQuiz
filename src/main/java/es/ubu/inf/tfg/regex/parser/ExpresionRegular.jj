options{  JDK_VERSION = "1.7";  static = false ;  USER_CHAR_STREAM = true ;  JAVA_UNICODE_ESCAPE = true ;  UNICODE_INPUT = true ;  //DEBUG_PARSER = true;}PARSER_BEGIN(ExpresionRegularParser)package es.ubu.inf.tfg.regex.parser;import es.ubu.inf.tfg.regex.datos.ExpresionRegular;public class ExpresionRegularParser{	private int posicion;}PARSER_END(ExpresionRegularParser)SKIP :{	" "|	"\r"|	"\t"}TOKEN :{  < KLEENE : "*" >| < CONCAT : "." | "·" | "\u00b7" | "\u2027" >| < UNION : "|" >| < OPEN_PAREN : "(" >| < CLOSE_PAREN : ")" >}TOKEN :{  < SYMBOL : ["a"-"z"] | "$" >| < EPSILON : "E" |  "\u03B5">| < END : "\n" >}	/*	 * <expresion> :- <operacion> <eof>	 * <operacion> :- <termino> ('|' <termino>)*	 * <termino> :- <unario> ('.' <unario>)*	 * <unario> :- <factor> '*'*	 * <factor> :- <simbolo> | <epsilon> | '(' <operacion> ')'	 */ExpresionRegular expresion() :{	ExpresionRegular expreg;}{	{		posicion = 1;	}	expreg = operacion() <END>	{		// Aumentamos la expresión regular		return ExpresionRegular.nodoConcat(expreg, ExpresionRegular.nodoAumentado(posicion));	}}ExpresionRegular operacion() :{	ExpresionRegular expregIzda, expregDcha;}{    expregIzda = termino()    (    	<UNION>    	expregDcha = termino()    	{    		expregIzda = ExpresionRegular.nodoUnion(expregIzda, expregDcha);    	}    )*    {    	return expregIzda;    }}ExpresionRegular termino() :{	ExpresionRegular expregIzda, expregDcha;}{	expregIzda = unario()    (        // LOOKAHEAD(<CONCAT>|<SYMBOL>|<OPEN_PAREN>)		(		  <CONCAT>		)? // Para hacer el operador concatenación opcional		expregDcha = unario()		{			expregIzda = ExpresionRegular.nodoConcat(expregIzda, expregDcha);		}    )*    {    	return expregIzda;    }}ExpresionRegular unario() :{	ExpresionRegular expreg;}{	expreg = factor()    (		(<KLEENE>)+  // El cierre es idempotente		{			expreg = ExpresionRegular.nodoCierre(expreg);		}    )?    {    	return expreg;  	}}ExpresionRegular factor() :{	Token token;	ExpresionRegular expreg;}{	token = <SYMBOL>     {    	return ExpresionRegular.nodoSimbolo(posicion++, token.image.charAt(0));    }	| <EPSILON>	{    	return ExpresionRegular.nodoVacio();  	}  	| <OPEN_PAREN> expreg = operacion() <CLOSE_PAREN>  	{  		return expreg;  	}}